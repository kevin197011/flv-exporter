# 备选Dockerfile - 使用Alpine Linux (对SSL算法更宽松)
# 多阶段构建 - 构建阶段
FROM gradle:7.6-jdk11-alpine AS builder

# 设置工作目录
WORKDIR /app

# 复制构建文件
COPY build.gradle settings.gradle ./
COPY gradle gradle

# 下载依赖（利用Docker缓存）
RUN gradle dependencies --no-daemon

# 复制源代码
COPY src src

# 构建应用
RUN gradle bootJar --no-daemon -x test

# 运行阶段 - Alpine Linux (SSL策略更宽松)
FROM openjdk:11-jre-alpine

# 安装必要工具 (Alpine对旧SSL算法更宽松)
RUN apk add --no-cache \
        curl \
        tzdata \
        ca-certificates && \
    # 设置时区
    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo "Asia/Shanghai" > /etc/timezone && \
    # 更新CA证书
    update-ca-certificates && \
    # 清理
    apk del tzdata

# 创建应用用户
RUN addgroup -g 1000 flvexporter && \
    adduser -D -s /bin/sh -u 1000 -G flvexporter flvexporter

# 设置工作目录
WORKDIR /app

# 复制构建的jar文件
COPY --from=builder /app/build/libs/*.jar app.jar

# 创建配置和日志目录
RUN mkdir -p /app/config /app/logs && \
    chown -R flvexporter:flvexporter /app

# 切换到应用用户
USER flvexporter

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# 暴露端口
EXPOSE 8080

# JVM参数优化 - Alpine + Java 11 (最宽松的SSL设置)
ENV JAVA_OPTS="-Xms256m -Xmx512m -XX:+UseG1GC \
    -Djava.security.egd=file:/dev/./urandom \
    -Djava.net.useSystemProxies=true \
    -Dcom.sun.net.ssl.checkRevocation=false"

# 启动应用
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -Dspring.config.location=file:/app/config/application.yml -jar app.jar"]